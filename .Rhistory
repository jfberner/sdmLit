head(as.data.frame(pocc))
head(as_tibbe(rasterToPoints(pocc))[,1:2])
library(dplyr)
head(as_tibbe(rasterToPoints(pocc))[,1:2])
library(tibble)
head(as_tibbe(rasterToPoints(pocc))[,1:2])
library(tidyverse)
head(as_tibbe(rasterToPoints(pocc))[,1:2])
head(as_tibble(rasterToPoints(pocc))[,1:2])
# If you need help in the definition of the objects below, please refer back to the Introduction of this document.
occ.pnts <- sdmTools::sdm_to_occ.pnts(env = envpres, occ = occ_train, algorithms = algorithms, predict_object = pocc)
output.mods <- sdmTools::sdm_to_output.mods(env = envpres, algorithms = algorithms, predict_object = pocc, long = 'x', lat = 'y')
# Longitude is also commonly typed as 'lon', and Latitude as 'lat'.
# To check how yours is called, I suggest running:
# head(as_tibble(rasterToPoints(pocc))[,1:2]) # which will output longitude and latitude respectively.
output.mods
# The accum.occ function is annoying and creates three different plots in three different devices.
# To save them we'll use dev.print() in the reverse order in which they appear. I could automatize
# this part of the script but I don't have time for that, I'm sorry dear reader.
dev.new() ; dev.control('enable') ; dev.off() # Just enabling device control
# WARNING: Before running this next section of the script, make sure nothing
# is plotted and no devices are open with dev.list()
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
# If you need help in the definition of the objects below, please refer back to the Introduction of this document.
occ.pnts <- sdmTools::sdm_to_occ.pnts(env = envpres, occ = occ_train, algorithms = algorithms, predict_object = pocc)
output.mod <- sdmTools::sdm_to_output.mods(env = envpres, algorithms = algorithms, predict_object = pocc, long = 'x', lat = 'y')
# Longitude is also commonly typed as 'lon', and Latitude as 'lat'.
# To check how yours is called, I suggest running:
# head(as_tibble(rasterToPoints(pocc))[,1:2]) # which will output longitude and latitude respectively.
# The accum.occ function is annoying and creates three different plots in three different devices.
# To save them we'll use dev.print() in the reverse order in which they appear. I could automatize
# this part of the script but I don't have time for that, I'm sorry dear reader.
dev.new() ; dev.control('enable') ; dev.off() # Just enabling device control
# WARNING: Before running this next section of the script, make sure nothing
# is plotted and no devices are open with dev.list()
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
# To save the plots, we have to do it in the reverse order as they were plotted:
dev.print(png, file = "figs/aocc/svm_aocc_aocc.png", # Accumulation of Occurrences Plot
width=8, height=8, units="in", res=300);dev.off()
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
#'
#' dev.print(png, file = "figs/aocc/svm_aocc_map.png",
#'           width=8, height=8, units="in", res=300);dev.off()
#'
#' dev.print(png, file = "figs/aocc/svm_aocc_env.png",
#'           width=8, height=8, units="in", res=300);dev.off()
#' }
#' @references
#' \insertRef{jimenezLeavingAreaReceiving2020a}{sdmTools}
#'
accum.occ <- function(sp.name,output.mod,occ.pnts,null.mod,conlev=0,bios=0){
# Sort the points according to the suitability calculated by the ENM model (column 3 from mxnt.pns)
iord <- order(output.mod[,3],decreasing = T) # highly suitable cells first
nmxnt <- length(iord)
mxnt.ord <- output.mod[iord,]
# Raw outputs for the occurrences
mxnt.occ <- occ.pnts[,3]
# Number of occurrences
nocc <- length(mxnt.occ)
# Prevalence = number of occurrences / number of cells in G
preval <- nocc / (nmxnt + nocc)
# Use vector of output values for the occurrences to classify all the cells in the M region
# acording to the partition of the interval (0,1) defined by that vector
brks <- sort(unique(mxnt.occ))
if(brks[length(brks)] != 1){ # 1 is not included
if(brks[1] != 0){ # 0 is not included
mxnt.cls <- tabulate(cut(mxnt.ord[,3],breaks=c(0,brks,1),labels=F,right=T))
} else{ # 0 is included
mxnt.cls <- tabulate(cut(mxnt.ord[,3],breaks=c(brks,1),labels=F,right=T))
}
} else{ # 1 is included
if(brks[1] != 0){ # 0 is not included
mxnt.cls <- tabulate(cut(mxnt.ord[,3],breaks=c(0,brks),labels=F,right=T))
} else{ # 0 is included
mxnt.cls <- tabulate(cut(mxnt.ord[,3],breaks=brks,labels=F,right=T))
}
# calculate the accumulated number of cells in the subregions
mxnt.acc <- c(0,cumsum(rev(mxnt.cls)))
# Count the number of occurrence points in each subregion
counts <- vector(mode="numeric")
occs <- sort(mxnt.occ,decreasing = T)
dupl <- duplicated(occs)*1 # ==1 if value is duplicated, ==0 otherwise
for(i in 1:nocc){
if(dupl[i]==0){ # a value can be replicated two or more times
counts <- c(counts,1)
} else {
nn <- length(counts)
counts[nn] <- counts[nn] + 1
}
# calculate the accumulated number of occurrences in the subregions
occ.acc <- c(0,cumsum(counts),rep(nocc,length(mxnt.acc)-length(counts)-1))
# select values that contain important imformation
last <- sum(occ.acc < nocc)
if(mxnt.acc[last] == nmxnt){
ntt <- 1:(last+1)
} else{
ntt <- 1:length(mxnt.acc)
}
# Print relevant values
print(paste("Number of cells in MaxEnt output:",nmxnt),quote=F)
print(paste("Number of occurrence points:",nocc),quote=F)
print(paste("Probability of selecting an occurrence point:",round(preval,4)),quote=F)
# Calculate values of the intervals around the random line using the null model
if(conlev > 0){
conlev1 <- (1 - conlev) / 2
if(null.mod == "binomial"){
infs <- qbinom(conlev1,mxnt.acc[ntt],preval)
sups <- qbinom(conlev1,mxnt.acc[ntt],preval,lower.tail = F)
}
if(null.mod == "hypergeom") {
infs <- qhyper(conlev1,m=nocc,n=nmxnt,k=mxnt.acc[ntt])
sups <- qhyper(conlev1,m=nocc,n=nmxnt,k=mxnt.acc[ntt],lower.tail = F)
}
# Before making the plots, we will use shades of gray to identfy the different subareas
nsub <- length(mxnt.acc)
cols <- gray((0:nsub/nsub)) #zero indicates black, and one indicates white
ci <- vector("numeric")
for (i in 1:nsub){
# black indicates highly suitable, and white indicates highly unsuitable
if(i==nsub){
c <- rep(cols[nsub],nmxnt-length(ci))
ci <-c(ci,c)
} else{
c <- rep(cols[i],mxnt.acc[i+1]-mxnt.acc[i])
ci <-c(ci,c)
}
# we will use the world map from 'maptools'
data("wrld_simpl", package="maptools")
# but, before plotting we need to crop the world map using output.mod
# create the clipping polygon
mxnt.ext <- bbox(SpatialPoints(output.mod[,1:2]))
### Start plotting
# Plot 1: subregions in geographic space
dev.new()
#if( (ncol(output.mod)-3)==2 ) { par(mfrow=c(1,2)) }
plot(wrld_simpl,xlim=mxnt.ext[1,],ylim=mxnt.ext[2,],col="wheat1",axes=T,bg="azure2",main="Subregions in Geographical Space")
# add points with corresponding gray shades
points(mxnt.ord[,1:2],pch=15,col=ci,cex=0.5)
# add occurrences
points(occ.pnts[,1:2],pch=19,col="red")
# add a color bar to distinguish between low and high suitabilities
# coordinates for 'text' function need to be changed when using different values for 'bios'
fields::colorbar.plot(mxnt.ext[1,1]+1,mxnt.ext[2,1],
adj.y=0,adj.x = 0,strip=0:nsub,col=ci,strip.length = 0.2,strip.width = 0.05)
text(mxnt.ext[1,1]+4.5,mxnt.ext[2,1]+2,"Suitability of points in M")
text(mxnt.ext[1,1]+1.5,mxnt.ext[2,1]-0.5,"High")
text(mxnt.ext[1,1]+7.5,mxnt.ext[2,1]-0.5,"Low")
legend("bottomleft",legend=sp.name,pch=19,col="red",bty="n")
###
# Plot 2: subregions in environmental space
cn <- names(output.mod)
if(length(bios)==1){
if((ncol(output.mod)-3)>2){ # more than two environmental variables
cis <- c(rev(ci),rep(2,nocc)) # grey shades for subregions + red for occurrence points
nc <- 4:ncol(output.mod)
# build a matrix with background and presence points, sorted for visualization
plotm <- rbind(as.matrix(mxnt.ord[nmxnt:1,nc]),as.matrix(occ.pnts[,nc]))
pch.occ <- ifelse(nocc<=50,19,20)
pcht <- c(rep(18,length(ci)),rep(pch.occ,nocc))
mypanel <- function(x,y,col=cis,pch=pcht,bgcolor="steelblue4"){
# function used to color the background in the panels from function pairs
ll <- par("usr")
rect(ll[1], ll[3], ll[2], ll[4], col=bgcolor)
points(x,y,col=col,pch=pch,bg=bgcolor)
}
dev.new()
pairs(plotm,panel=mypanel,main="Subregions in Environmental Space")
}
else{ # there are only two environmental variables
dev.new()
plot(output.mod[,4],output.mod[,5],type="n",xlab=cn[bios[1]],ylab=cn[bios[2]],
main="Subregions in Environmental Space")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = "steelblue4", border = "red")
points(mxnt.ord[nmxnt:1,4:5],pch=15,col=rev(ci),cex=0.5)
# add occurrences
points(occ.pnts[,4:5],pch=19,col="red")
legend("topleft",legend=c(sp.name,"Occurence points","Suitability of points in M"),pch=c(19,19,15),col=c("white","red","grey"),bty="n")
}
} else{ # the user selected only two environmental variables
dev.new()
plot(output.mod[,bios[1]],output.mod[,bios[2]],type="n",xlab=cn[bios[1]],ylab=cn[bios[2]],
main="Subregions in Environmental Space")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = "steelblue4", border = "red")
# add points from low to high suitability, works better for the visualization
points(mxnt.ord[nmxnt:1,bios],pch=15,col=rev(ci),cex=0.5)
# add occurrences
points(occ.pnts[,bios],pch=19,col="red")
# add a color bar to distinguish between low and high suitabilities
# coordinates for 'text' function need to be changed when using different values for 'bios'
fields::colorbar.plot(min(output.mod[,bios[1]])+10,max(output.mod[,bios[2]])-110,
adj.y=0,adj.x = 0,strip=0:nsub,col=ci,strip.length = 0.2,strip.width = 0.05)
text(min(output.mod[,bios[1]])+30,max(output.mod[,bios[2]])-45,"Suitability of points in M")
text(min(output.mod[,bios[1]])+9,max(output.mod[,bios[2]])-130,"High")
text(min(output.mod[,bios[1]])+50,max(output.mod[,bios[2]])-130,"Low")
legend("topleft",legend=sp.name,pch=19,col="red",bty="n")
}
###
# Plot 3: comparison among counts under random selection hypothesis
dev.new()
plot(mxnt.acc[ntt],mxnt.acc[ntt]*preval,type="b",col="red",xlab="Number of cells", ylab="Occurrences",
main="Accumulation of occurrences",xlim=c(0,mxnt.acc[length(ntt)]),ylim=c(0,nocc),lwd=2)
# confidence intervals from hypergeom/binomial distribution
if(conlev > 0){
#lines(mxnt.acc[ntt],infs,type="b",col="skyblue3",lwd=2)
#lines(mxnt.acc[ntt],sups,type="b",col="skyblue3",lwd=2)
segments(mxnt.acc[ntt],infs,mxnt.acc[ntt],sups,col = "gray")
points(mxnt.acc[ntt],infs,pch=20,col="grey25")
points(mxnt.acc[ntt],sups,pch=20,col="grey25")
if(null.mod == "binomial") legmod <- paste("Binomial CI, p =",conlev)
if(null.mod == "hypergeom") legmod <- paste("Hypergeometric CI, p =",conlev)
}
# under non-random selection hypothesis
lines(mxnt.acc[ntt],occ.acc[ntt],type="o",col="blue",lwd=2)
if(max(ntt)<=50){
text(mxnt.acc[ntt],occ.acc[ntt],labels=occ.acc,pos=2)
} else {
rind <- seq(1,length(ntt),by=200) #%#
text(mxnt.acc[rind],occ.acc[rind],labels=occ.acc[rind],pos=2)
}
legend("bottomright",legend=c(sp.name,"Random counts",legmod,"SDM counts"),lwd=2,col=c("white","red","gray","blue"),bty="n")
resul <- cbind(occ.acc,mxnt.acc,round((occ.acc/nocc)*100,2),round((mxnt.acc/nmxnt)*100,2))
colnames(resul) <- c("No.occurrences","No.cells","%Gained Occ","%Area")
return(resul)
}
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.new() ; dev.control('enable') ; dev.off() # Just enabling device control
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.new() ; dev.control('enable') ; dev.off()
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]], # The index 1 here refers to the algorithm index, if you followed the exact same syntax so far, it should be the same index as in the 'algorithms' object
occ.pnts = occ.pnts[[1]], # Same observation as above
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
knit_with_parameters("~/Documents/sdmTools/README.Rmd")
aocc_list <- list(aocc_svm, aocc_maxent, aocc_bioclim, aocc_domain)
source("~/Documents/sdmTools1/R/04_Model-evaluation.R", echo=TRUE)
# rinse and repeat for the next algorithm
aocc_maxent <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[2]],
occ.pnts = occ.pnts[[2]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
;dev.off()
dev.off()
# rinse and repeat for the next algorithm
aocc_bioclim <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[3]],
occ.pnts = occ.pnts[[3]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off()
# rinse and repeat for the next algorithm
aocc_domain <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[4]],
occ.pnts = occ.pnts[[4]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off()
dev.new() ; dev.control('enable') ; dev.off() # Just enabling device control
# WARNING: Before running this next section of the script, make sure nothing is plotted and no devices are open with dev.list()
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]],
occ.pnts = occ.pnts[[1]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
aocc_maxent <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[2]],
occ.pnts = occ.pnts[[2]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
aocc_bioclim <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[3]],
occ.pnts = occ.pnts[[3]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
aocc_domain <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[4]],
occ.pnts = occ.pnts[[4]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
dev.new() ; dev.control('enable') ; dev.off() # Just enabling device control
# WARNING: Before running this next section of the script, make sure nothing is plotted and no devices are open with dev.list()
aocc_svm <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[1]],
occ.pnts = occ.pnts[[1]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
aocc_maxent <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[2]],
occ.pnts = occ.pnts[[2]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
aocc_bioclim <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[3]],
occ.pnts = occ.pnts[[3]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
aocc_domain <- accum.occ(sp.name = 'Charinus',
output.mod = output.mod[[4]],
occ.pnts = occ.pnts[[4]],
null.mod = "hypergeom",
conlev = 0.05, bios = 0)
dev.off(); dev.off(); dev.off()
model_comp <- comp.accplot(mods = aocc_list,
nocc = length(occ_train),
ncells = raster::ncell(envpres),
sp.name = 'Charinus',
mods.names = c('svm', 'maxent', 'bioclim', 'domain'), alpha = 0.05)
aocc_list <- list(aocc_svm, aocc_maxent, aocc_bioclim, aocc_domain)
model_comp <- comp.accplot(mods = aocc_list,
nocc = length(occ_train),
ncells = raster::ncell(envpres),
sp.name = 'Charinus',
mods.names = c('svm', 'maxent', 'bioclim', 'domain'), alpha = 0.05)
devtools::document()
freq <- sdm_to_freqEnsemble(model = m_occ, preds = pocc, species = 'charinus', threshold = 1)
View(preds)
preds
pocc
model <- sdm::read.sdm("data/processed/model-build/model-object/model.sdm")
pocc <- terra::rast('data/processed/model-build/predictions/predictions.present-all-algorithms.tif')
preds <- raster::stack(pocc)
teste <- sdm_to_freqEnsemble(model, preds, c('charinus'), 1)
source("~/Documents/sdmTools1/R/03_Model-Build.R", echo=TRUE)
pocc <- terra::rast('data/processed/model-build/predictions/predictions.present-terraStd.tif')
preds <- raster::stack(pocc)
teste <- sdm_to_freqEnsemble(model, preds, c('charinus'), 1)
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/raster/raster_3.5-15.tar.gz")
devtools::install_url('https://cran.r-project.org/src/contrib/Archive/dismo/dismo_1.3-5.tar.gz')
source("~/Documents/sdmTools1/R/03_Model-Build.R", echo=TRUE)
p_occ <- sdm::predict(m_occ, newdata = envpres, # new data is the environment in which we want to predict
filename = 'data/processed/model-build/predictions/predictions.present-rasterStd.tif',
prj = T, overwrite = T, nc = 7)
devtools::install_github('babaknaimi/sdm')
source("~/Documents/sdmTools1/R/03_Model-Build.R", echo=TRUE)
# Build the model:
m_occ <- sdm(formula = charinus~.,data = d_occ,
methods = c('svm', 'maxent', 'glm', 'domain'),
replication = c('bootstrapping'), n=10) # Create model
# And save it, we'll use it later
sdm::write.sdm(m_occ, "data/processed/model-build/model-object/model", overwrite = T) # Save the model object into RDS format, extension.sdm
if (!dir.exists("data/processed/model-build/predictions/")) dir.create("data/processed/model-build/predictions/", recursive = TRUE) # Create this folder
p_occ <- sdm::predict(m_occ, newdata = envpres, # new data is the environment in which we want to predict
filename = 'data/processed/model-build/predictions/predictions.present-rasterStd.tif',
prj = T, overwrite = T, nc = 7)
p_occ <- predict(m_occ, newdata = envpres, # new data is the environment in which we want to predict
filename = 'data/processed/model-build/predictions/predictions.present-rasterStd.tif',
prj = T, overwrite = T, nc = 7)
?sdm
??sdmData
remotes::install_github(babaknaimi/sdm)
remotes::install_github('babaknaimi/sdm')
# Libs #####
# remotes::install_github('babaknaimi/sdm')
library(sdm)
sdm::installAll()
# Libs #####
# remotes::install_github('babaknaimi/sdm')
library(sdm)
# sdm::installAll()
library(raster)
library(terra)
library(tidyr)
library(dplyr)
library(TeachingDemos)
char2seed('Charinus')
# Load Data #####
## Environmental Data #####
envpres <- dir(path = 'data/processed/envcropped/Present/', pattern = ".tif$", full.names = T)
envpres <- raster::stack(envpres)
## Occurrence Data #####
occ_train <- rgdal::readOGR('data/processed/shapefiles/train.shp') # only presence data, dropping absences
occ_test <- rgdal::readOGR('data/processed/shapefiles/test.shp')
# Model Build #####
if (!dir.exists("data/processed/model-build/model-object/")) dir.create("data/processed/model-build/model-object/", recursive = TRUE) # Create this folder for the outputs
# Prepare the data:
d_occ <- sdmData(formula = charinus~.,
train=occ_train, test = occ_test, predictors = envpres,
bg = 18, method = 'eRandom') # Create sdmData object
# And save it, we'll use it later
sdm::write.sdm(d_occ, "data/processed/model-build/model-object/model-data", overwrite = T)
# Build the model:
m_occ <- sdm(formula = charinus~.,data = d_occ,
methods = c('svm', 'maxent', 'glm', 'domain'),
replication = c('bootstrapping'), n=10) # Create model
# And save it, we'll use it later
sdm::write.sdm(m_occ, "data/processed/model-build/model-object/model", overwrite = T) # Save the model object into RDS format, extension.sdm
# gui(m_occ) # if you want to see model results
if (!dir.exists("data/processed/model-build/predictions/")) dir.create("data/processed/model-build/predictions/", recursive = TRUE) # Create this folder
p_occ <- predict(m_occ, newdata = envpres, # new data is the environment in which we want to predict
filename = 'data/processed/model-build/predictions/predictions.present-rasterStd.tif',
prj = T, overwrite = T, nc = 7)
names(p_occ) <- p_occ@z$fullname # This is SUPER important. It ensure both species and algorithm names are retained in layer names
# This creates a file in the specified folder BUT the file doesn't retain the layer names, which will be super important for us to distinguish among methods. To do so:
p_occ_stack <- raster::stack(p_occ) #convert rasterBrick to rasterStack
p_occ_spatraster <- terra::rast(p_occ_stack) #convert rasterStack to SpatRaster
names(p_occ_spatraster) <- names(p_occ_stack)
terra::writeRaster(x = p_occ_spatraster,
filename = 'data/processed/model-build/predictions/predictions.present-terraStd.tif',
overwrite = TRUE)
model <- sdm::read.sdm("data/processed/model-build/model-object/model.sdm")
pocc <- terra::rast('data/processed/model-build/predictions/predictions.present-terraStd.tif')
preds <- raster::stack(pocc)
teste <- sdm_to_freqEnsemble(model, preds, c('charinus'), 1)
sdm_to_freqEnsemble <- function(model, preds, species, threshold){
evaluation <- sdm::getEvaluation(x = model, p = preds, wtest = 'test.dep', species = species, index = T, stat = c('AUC', 'COR', 'TSS', 'threshold'), opt = threshold) # opt = 2 = max(se + sp)
eval <- cbind(evaluation, model@run.info['species'], model@run.info['method'])
names(eval)[names(eval) == 'method'] <- 'algorithm' ; names(eval)[names(eval) == 'threshold'] <- 'thrs' ; names(eval)[names(eval) == 'modelID'] <- 'replica'
tif <- preds
enm <- preds[[1]]
csv <- eval
## frequency ensemble
# species
sp <- csv %>%
dplyr::select(species) %>%
dplyr::distinct() %>%
dplyr::pull()
# algorithms
al <- csv %>%
dplyr::select(algorithm) %>%
dplyr::distinct() %>%
dplyr::pull() %>%
stringr::str_replace("_", "")
# ensembles
ens <- enm
ens[] <- 0
# for
for(i in sp){
# select model by species
tif.sp <- grep(i, names(tif), value = TRUE)
eva.sp <- csv %>% dplyr::filter(species == i)
# information
print(paste0("The ensemble for ", i, " started, relax, take a coffee, it may take awhile..."))
for(j in al){
# select model by algorithms
tif.al <- grep(j, tif.sp, value = TRUE)
eva.al <- eva.sp %>% dplyr::filter(algorithm == j) %>% dplyr::select(species, replica, algorithm, thrs, AUC, TSS) %>% as_tibble()
# information
print(paste0("The ensemble for '", i, "', algorithm '", j, "' are going!"))
# import raster
enm.al <- stack(tif[[tif.al]])
for(k in seq(length(tif.al))){
# sum
ens <- sum(ens, enm.al[[1]] >= eva.al[1, 4] %>% dplyr::pull())
}
# export
x <- raster()
names(ens) <- paste0("ensemble_freq_", i,".tif")
y <- raster::addLayer(x, ens / (length(tif.sp)))
# information
print(paste0("Nice! The ensemble of ", i, " it's done!"))
ens[] <- 0
}
print("Yeah! It's over!!!")
return(y)
}
teste <- sdm_to_freqEnsemble(model, preds, c('charinus'), 1)
class(teste)
freqE <- sdm_to_freqEnsemble(model = m_occ, preds =  pocc, species =  c('charinus'), threshold = 2)
frequency_ensemble_plot <- function(freq_object){
for (i in length(names(freq_object))) {
z <- ggplot(data = raster::rasterToPoints(freq_object[[i]]) %>% tibble::as_tibble(), aes(x, y)) +
geom_raster(aes_string(fill = colnames(raster::rasterToPoints(freq_object[[i]]) %>% tibble::as_tibble())[3])) +
scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
theme_minimal() +
theme(legend.title = element_blank())}
return(z)
}
freqPlot <- frequency_ensemble_plot(teste)
library(ggplot2)
freqPlot <- frequency_ensemble_plot(teste)
freqPlot
devtools::document()
